# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger: none
# trigger:
#   branches:
#     include:
#       - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  acrHostName: 'azuresampleacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Sample/Sample.Api.Images/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
  - stage: CI
    jobs:
      - job: build_dot_net_project
        continueOnError: false
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solution)'

          - task: VSBuild@1
            inputs:
              solution: '$(solution)'
              msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'

          - task: VSTest@2
            inputs:
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'

          - task: PowerShell@2
            displayName: 'Check container images'
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                Write-Host "Hello World"
                cd sample
                ls

          # - task: CopyFiles@2
          #   inputs:
          #     SourceFolder: '$(agent.builddirectory)'
          #     Contents: '**'
          #     TargetFolder: '$(build.artifactstagingdirectory)'
          #     CleanTargetFolder: true
              
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          #     ArtifactName: 'drop'
          #     publishLocation: 'Container'
          # - task: Docker@2
          #   inputs:
          #     containerRegistry: 'connect-acr-2'
          #     repository: 'azuresampleacr'
          #     command: 'buildAndPush'
          #     Dockerfile: '**/Dockerfile'
              
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              containerRegistry: 'connect-acr-2'
              command: 'login'

          - task: Docker@2
            inputs:
              containerRegistry: 'connect-acr-2'
              repository: 'azuresampleacr'
              command: 'build'
              Dockerfile: '**/Dockerfile'
            
          # - task: Docker@2
          #   inputs:
          #     containerRegistry: 'connect-acr-2'
          #     repository: 'azuresampleacr'
          #     command: 'push'

          # - task: Docker@2
          #   displayName: 'Build container image'
          #   inputs:
          #     containerRegistry: 'azuresampleacr'
          #     command: 'buildAndPush'
          #     Dockerfile: '**/Dockerfile'
          # - task: Docker@1
          #   displayName: 'Build container image'
          #   inputs:
          #     azureSubscriptionEndpoint: 'connect-spn-2'
          #     azureContainerRegistry: '${acrHostName}'
          #     imageName: '$(Build.Repository.Name):$(Build.BuildId)'
          #     useDefaultContext: false
          #     dockerFile: '**/Dockerfile' # '${dockerfilePath}'
          #     buildContext: '${System.DefaultWorkingDirectory}/PublishedWebApp'
          # - task: Docker@1
          #   displayName: 'Push container image'   
          #   inputs:
          #     azureSubscriptionEndpoint: 'connect-spn-2'
          #     azureContainerRegistry: '${acrHostName}'
          #     command: 'Push an image'
          #     imageName: '$(Build.Repository.Name):$(Build.BuildId)'
              
          - task: PowerShell@2
            displayName: 'Check container images'
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                Write-Host "Hello World"
                docker image ls
          # - task: TerraformInstaller@0
          #   displayName: 'install'
          #   inputs:
          #     terraformVersion: '0.13.2'

  #         - task: TerraformTaskV1@0
  #           displayName: 'init'
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             backendServiceArm: 'connect-spn-2'
  #             backendAzureRmResourceGroupName: 'sample-terraform-rg'
  #             backendAzureRmStorageAccountName: 'sampleterraform'
  #             backendAzureRmContainerName: 'terrform'
  #             backendAzureRmKey: 'development.terraform.tfstate'

  #         - task: TerraformTaskV1@0
  #           displayName: 'validate'
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'validate'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)'

  # - stage: CD
  #   jobs:
  #     - deployment: deploy_terraform
  #       continueOnError: false
  #       environment : 'Development'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: self
  #               - task: TerraformInstaller@0
  #                 displayName: "install"
  #                 inputs:
  #                   terraformVersion: '0.13.2'
  #               - task: TerraformTaskV1@0
  #                 displayName: 'init'
  #                 inputs:
  #                   provider: 'azurerm'
  #                   command: 'init'
  #                   workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #                   backendServiceArm: 'connect-spn-2'
  #                   backendAzureRmResourceGroupName: 'sample-terraform-rg'
  #                   backendAzureRmStorageAccountName: 'sampleterraform'
  #                   backendAzureRmContainerName: 'terrform'
  #                   backendAzureRmKey: 'development.terraform.tfstate'
                
  #               - task: PowerShell@2
  #                 inputs:
  #                   targetType: 'inline'
  #                   script: |
  #                     # Write your PowerShell commands here.
                      
  #                     Write-Host "Change directory"
  #                     cd $(System.DefaultWorkingDirectory)/terraform
  #                     ls

  #               - task: TerraformTaskV1@0
  #                 displayName: 'plan'
  #                 inputs:
  #                   provider: 'azurerm'
  #                   command: 'plan'
  #                   workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #                   environmentServiceNameAzureRM: 'connect-spn-2'
  #               - task: TerraformTaskV1@0
  #                 displayName: 'apply'
  #                 inputs:
  #                   provider: 'azurerm'
  #                   command: 'apply'
  #                   workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #                   environmentServiceNameAzureRM: 'connect-spn-2'