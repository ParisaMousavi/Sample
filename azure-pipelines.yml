# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger: none
# trigger:
#   branches:
#     include:
#       - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  acrHostName: 'azuresampleacr.azurecr.io'
  imagesdockerfilePath: '$(Build.SourcesDirectory)/Sample/Dockerfile.images'
  productsdockerfilePath: '$(Build.SourcesDirectory)/Sample/Dockerfile.products'
  ordersdockerfilePath: '$(Build.SourcesDirectory)/Sample/Dockerfile.orders'
  tag: '$(Build.BuildId)'

stages:
  - stage: CI
    jobs:
      - job: build_dot_net_project
        continueOnError: false
        steps:

          # The dockerfiles have to be moved to .sln path
          - task: PowerShell@2
            displayName: 'Check container images'
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.

                cd D:\a\1\s\Sample\Sample.Api.Images
                mv Dockerfile ../Dockerfile.images

                cd D:\a\1\s\Sample\Sample.Api.Products
                mv Dockerfile ../Dockerfile.products

                cd D:\a\1\s\Sample\Sample.Api.Orders
                mv Dockerfile ../Dockerfile.orders

                cd..
                ls

          - task: Docker@2
            displayName: 'Build docker image for Images Service'
            inputs:
              containerRegistry: 'connect-acr-2'
              repository: 'sampleapiimages'
              command: 'buildAndPush'
              Dockerfile: $(imagesdockerfilePath)

          - task: Docker@2
            displayName: 'Build docker image for Products Service'
            inputs:
              containerRegistry: 'connect-acr-2'
              repository: 'sampleapiproducts'
              command: 'buildAndPush'
              Dockerfile: $(productsdockerfilePath)

          - task: Docker@2
            displayName: 'Build docker image for Orders Service'
            inputs:
              containerRegistry: 'connect-acr-2'
              repository: 'sampleapiorders'
              command: 'buildAndPush'
              Dockerfile: $(ordersdockerfilePath)

          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
              terraformVersion: '0.13.2'

          - task: TerraformTaskV1@0
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'connect-spn-2'
              backendAzureRmResourceGroupName: 'sample-terraform-rg'
              backendAzureRmStorageAccountName: 'sampleterraform'
              backendAzureRmContainerName: 'terrform'
              backendAzureRmKey: 'development.terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: 'validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

  - stage: CD
    jobs:
      - deployment: deploy_terraform
        continueOnError: false
        environment : 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformInstaller@0
                  displayName: "install"
                  inputs:
                    terraformVersion: '0.13.2'
                - task: TerraformTaskV1@0
                  displayName: 'init'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
                    backendServiceArm: 'connect-spn-2'
                    backendAzureRmResourceGroupName: 'sample-terraform-rg'
                    backendAzureRmStorageAccountName: 'sampleterraform'
                    backendAzureRmContainerName: 'terrform'
                    backendAzureRmKey: 'development.terraform.tfstate'
                
                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: |
                      # Write your PowerShell commands here.
                      
                      Write-Host $(PASSWORD)
                      Write-Host "Change directory"
                      cd $(System.DefaultWorkingDirectory)/terraform
                      ls
                      cd $(System.DefaultWorkingDirectory)/frontend
                      ls
                      

                - task: TerraformTaskV1@0
                  displayName: 'plan'
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    commandOptions: '-var image-tag="$(Build.BuildId)"'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
                    environmentServiceNameAzureRM: 'connect-spn-2'
                - task: TerraformTaskV1@0
                  displayName: 'apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    commandOptions: '-var image-tag="$(Build.BuildId)"'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
                    environmentServiceNameAzureRM: 'connect-spn-2'
                    
                - task: AzureFileCopy@3
                  displayName: 'Upload products.html to static website'
                  inputs:
                    SourcePath: '$(System.DefaultWorkingDirectory)/frontend/products.html'
                    azureSubscription: 'connect-spn-2'
                    Destination: 'AzureBlob'
                    storage: 'azuresampleimagestorage'
                    ContainerName: '$web'

                - task: AzureFileCopy@3
                  displayName: 'Upload order.html to static website'
                  inputs:
                    SourcePath: '$(System.DefaultWorkingDirectory)/frontend/order.html'
                    azureSubscription: 'connect-spn-2'
                    Destination: 'AzureBlob'
                    storage: 'azuresampleimagestorage'
                    ContainerName: '$web'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Products table'
                  inputs:
                    azureSubscription: 'connect-spn-2'
                    AuthenticationType: 'connectionString'
                    ConnectionString: 'Server=tcp:products-db-srv.database.windows.net,1433;Initial Catalog=products;Persist Security Info=False;User ID=$(USERNAME);Password=$(PASSWORD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
                    deployType: 'InlineSqlTask'
                    SqlInline: |
                        USE [products]
                        GO

                        SET ANSI_NULLS ON
                        GO

                        SET QUOTED_IDENTIFIER ON
                        GO

                        DROP TABLE [dbo].[Products];
                        GO

                        CREATE TABLE [dbo].[Products] (
                            [Id]        UNIQUEIDENTIFIER NOT NULL,
                            [Name]      NVARCHAR (50)    NULL,
                            [Price]     DECIMAL (18)     NULL,
                            [Inventory] INT              NULL,
                            [ImageUrl]  NVARCHAR (MAX)   NULL,
                            PRIMARY KEY CLUSTERED ([Id] ASC)
                        )
                        GO 

                        Insert into Products (Id, Name, Price, Inventory, ImageUrl )
                        values(NEWID(), 'Book', 12, 200, 'https://sampleimagestorage.blob.core.windows.net/products/azure-app-service-erd.png')

                        Insert into Products (Id, Name, Price, Inventory, ImageUrl )
                        values(NEWID(), 'Product2', 14, 240, 'https://sampleimagestorage.blob.core.windows.net/products/azure-app-service-erd.png')

                    IpDetectionMethod: 'AutoDetect'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Order and OrderItems table'
                  inputs:
                    azureSubscription: 'connect-spn-2'
                    AuthenticationType: 'connectionString'
                    ConnectionString: 'Server=tcp:orders-db-srv.database.windows.net,1433;Initial Catalog=orders;Persist Security Info=False;User ID=$(USERNAME);Password=$(PASSWORD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
                    deployType: 'InlineSqlTask'
                    SqlInline: |
                      USE [orders]
                      GO
                      
                      SET ANSI_NULLS ON
                      GO
                      
                      SET QUOTED_IDENTIFIER ON
                      GO

                      DROP TABLE [dbo].[OrderItems];
                      GO
                      DROP TABLE [dbo].[Orders];
                      GO
                     
                      CREATE TABLE [dbo].[Orders] (
                          [Id]        UNIQUEIDENTIFIER NOT NULL,
                          [Fullname]  NVARCHAR (100)   NULL,
                          [OrderDate] SMALLDATETIME    NULL,
                          PRIMARY KEY CLUSTERED ([Id] ASC)
                      );
                       
                      CREATE TABLE [dbo].[OrderItems](
                          [Id] UNIQUEIDENTIFIER NOT NULL, 
                          [OrderId] UNIQUEIDENTIFIER NULL, 
                          [Name] NVARCHAR(50) NULL, 
                          [Price] DECIMAL NULL, 
                          [Quantity] INT NULL, 
                          PRIMARY KEY CLUSTERED ([Id] ASC),
                          CONSTRAINT [FK_OrderOrderItem] FOREIGN KEY ([OrderId]) REFERENCES [Orders]([Id])
                      );
                      
                    IpDetectionMethod: 'AutoDetect'